@PART[proceduralTankSRB]:NEEDS[ProceduralParts]:FOR[PayToPlay]			// Generally like a "static" SRB, but not subtracting resources cost and getting part cost from IPartCostModifier
{
	MODULE
	{
		name = EngineDecay

		topBaseRatedTime = -1			// No failures while burning
		maintenanceAtRatedTimeCoeff = 0.067	// If using SRBCost max maintenance cost is "base cost" multiplied by this

		baseIgnitions = 1			// -1 would turn ignition faiulures off
		maxIgnitions = 1			// base = max switches off interface but keeps igntion failures on
		maxIgnitionRestoreCostCoeff = 0

		useSRBCost = true			// Changes maintenance cost model, max as soon as ignitied once. Needed if topBaseRatedTime = -1, makes no sense if baseIgnitions = -1

		procPart = true			// Treating as a regular SRB, just changing the way we get the part's cost and mass

		subjectToProgress = false
	}
}
@PART[*]:HAS[@MODULE[EngineDecay]:HAS[#engineCategory[Stage1]]]:FOR[PayToPlay]
{
	@MODULE[EngineDecay]
	{
		topBaseRatedTime = 100
		topMaxRatedTime = 360
		maintenanceAtRatedTimeCoeff = 0.067
		maxMassRatedTimeCoeff = 0.2
		maxCostRatedTimeCoeff = 0.5

		baseIgnitions = 1
		maxIgnitions = 5
		maxMassIgnitionsCoeff = 0.1
		maxCostIgnitionsCoeff = 1
		maxIgnitionRestoreCostCoeff = 0.02

		maxFailureFixCostCoeff = 0.1
	}
}

@PART[*]:HAS[@MODULE[EngineDecay]:HAS[#engineCategory[Stage2]]]:FOR[PayToPlay]
{
	@MODULE[EngineDecay]
	{
		topBaseRatedTime = 180
		topMaxRatedTime = 900
		maintenanceAtRatedTimeCoeff = 0.067
		maxMassRatedTimeCoeff = 0.3
		maxCostRatedTimeCoeff = 3

		baseIgnitions = 1
		maxIgnitions = 20
		maxMassIgnitionsCoeff = 0.3
		maxCostIgnitionsCoeff = 2
		maxIgnitionRestoreCostCoeff = 0.02

		maxFailureFixCostCoeff = 0.1
	}
}

@PART[*]:HAS[@MODULE[EngineDecay]:HAS[#engineCategory[SRB]]]:FOR[PayToPlay]
{
	@MODULE[EngineDecay]
	{
		topBaseRatedTime = -1			// No failures while burning
		maintenanceAtRatedTimeCoeff = 0.067	// If using SRBCost max maintenance cost is "base cost" multiplied by this

		baseIgnitions = 1			// -1 would turn ignition faiulures off
		maxIgnitions = 1			// base = max switches off interface but keeps igntion failures on
		maxIgnitionRestoreCostCoeff = 0		// Setting it not to zero here does not make much sense because this field is designed for non-SRB maintenance model

		useSRBCost = true			// Changes maintenance cost model, max as soon as ignitied once. Needed if topBaseRatedTime = -1, makes no sense if baseIgnitions = -1

		subtractResourcesCost = true

		maxFailureFixCostCoeff = 0.1

		subjectToProgress = false
	}
}

@PART[*]:HAS[@MODULE[EngineDecay]:HAS[#engineCategory[OMS]]]:FOR[PayToPlay]
{
	@MODULE[EngineDecay]
	{
		topBaseRatedTime = 180			// 3 min (munar landing probe)
		topMaxRatedTime = 3600			// 1 h (orbital maneuvering)
		maintenanceAtRatedTimeCoeff = 0.067	// in all configurations repair cost is 1/3 of base part's cost + burn time penalty if burned for set rated time
		maxMassRatedTimeCoeff = 0.2		// mass penalty has linear growth, reaching 20% of base mass at max rated-burn time
		maxCostRatedTimeCoeff = 4		// cost penalty --//-- 400% of base cost at max rated-burn time

		baseIgnitions = 1			//not only OMS are ment to be present here
		maxIgnitions = 100
		maxMassIgnitionsCoeff = 0.1
		maxCostIgnitionsCoeff = 1
		maxIgnitionRestoreCostCoeff = 0.02

		maxFailureFixCostCoeff = 0.1
	}
}

@PART[*]:HAS[@MODULE[EngineDecay]:HAS[#engineCategory[Ion]]]:FOR[PayToPlay]
{
	@MODULE[EngineDecay]
	{
		topBaseRatedTime = 3600
		topMaxRatedTime = 864000
		maintenanceAtRatedTimeCoeff = 0.067
		maxMassRatedTimeCoeff = 0.1
		maxCostRatedTimeCoeff = 0.5

		baseIgnitions = -1

		maxFailureFixCostCoeff = 0.1

		subjectToProgress = false
	}
}

@PART[*]:HAS[@MODULE[EngineDecay]:HAS[#engineCategory[Nuclear]]]:FOR[PayToPlay]
{
	@MODULE[EngineDecay]
	{
		topBaseRatedTime = 1800
		topMaxRatedTime = 86400
		maintenanceAtRatedTimeCoeff = 0.1
		maxMassRatedTimeCoeff = 0.1
		maxCostRatedTimeCoeff = 0.2

		baseIgnitions = -1

		maxFailureFixCostCoeff = 0.1

		subjectToProgress = false
	}
}

@PART[*]:HAS[@MODULE[EngineDecay]:HAS[#engineCategory[Jet]]]:FOR[PayToPlay]
{
	@MODULE[EngineDecay]
	{
		topBaseRatedTime = 3600
		topMaxRatedTime = 86400
		maintenanceAtRatedTimeCoeff = 0.04
		maxMassRatedTimeCoeff = 0.1
		maxCostRatedTimeCoeff = 0.2

		baseIgnitions = -1

		maxFailureFixCostCoeff = 0.1
	}
}